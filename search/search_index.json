{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Janelia Turner Lab Y-Arena Odor Rig","title":"Home"},{"location":"#janelia-turner-lab-y-arena-odor-rig","text":"","title":"Janelia Turner Lab Y-Arena Odor Rig"},{"location":"firmware/y_arena_odor_controller/","text":"Repository https://github.com/janelia-arduino/YArenaOdorController","title":"YArenaOdorController"},{"location":"firmware/y_arena_odor_controller/#repository","text":"https://github.com/janelia-arduino/YArenaOdorController","title":"Repository"},{"location":"hardware/y_arena_odor_controller/","text":"Documentation https://janelia-kicad.github.io/y_arena_odor_controller/ Repository https://github.com/janelia-kicad/y_arena_odor_controller","title":"y_arena_odor_controller"},{"location":"hardware/y_arena_odor_controller/#documentation","text":"https://janelia-kicad.github.io/y_arena_odor_controller/","title":"Documentation"},{"location":"hardware/y_arena_odor_controller/#repository","text":"https://github.com/janelia-kicad/y_arena_odor_controller","title":"Repository"},{"location":"sa/arena/","text":"Arena Description Each arena contains three arms. The three arms are arranged so the arena looks like the letter \"Y\". A fly is placed in the arena and can walk up and down each of the three arms. Each arm has three odors, allowing the user to select one of three odors for each arm at a time. So there are a total of nine odors for each arena. Three and only three odors are active at any given time, one active odor for each arena arm. Images","title":"Arena"},{"location":"sa/arena/#arena","text":"","title":"Arena"},{"location":"sa/arena/#description","text":"Each arena contains three arms. The three arms are arranged so the arena looks like the letter \"Y\". A fly is placed in the arena and can walk up and down each of the three arms. Each arm has three odors, allowing the user to select one of three odors for each arm at a time. So there are a total of nine odors for each arena. Three and only three odors are active at any given time, one active odor for each arena arm.","title":"Description"},{"location":"sa/arena/#images","text":"","title":"Images"},{"location":"sa/module/","text":"Module Description A module contains four arenas. Layout 1 3 0 2 Images","title":"Module"},{"location":"sa/module/#module","text":"","title":"Module"},{"location":"sa/module/#description","text":"A module contains four arenas.","title":"Description"},{"location":"sa/module/#layout","text":"1 3 0 2","title":"Layout"},{"location":"sa/module/#images","text":"","title":"Images"},{"location":"sa/rig/","text":"Rig Description A rig contains four modules for a total of sixteen arenas. Layout 5 7 13 15 4 6 12 14 1 3 9 11 0 2 8 10","title":"Rig"},{"location":"sa/rig/#rig","text":"","title":"Rig"},{"location":"sa/rig/#description","text":"A rig contains four modules for a total of sixteen arenas.","title":"Description"},{"location":"sa/rig/#layout","text":"5 7 13 15 4 6 12 14 1 3 9 11 0 2 8 10","title":"Layout"},{"location":"setup/linux_host/","text":"Linux Install Docker https://github.com/janelia-experimental-technology/docker_setup Clone Repository and Build Docker Image cd y_arena_odor_controller_ros docker stop $( docker ps -aq ) docker system prune -f docker build -t y_arena_odor_controller:latest . Send Messages to ycontroller docker run --rm --net = host --pid = host -it y_arena_odor_controller:latest ros2 topic pub --once /arena_odors y_arena_interfaces/msg/ArenaOdors \"{arena: 0, odors: [0, 1, 2]}\" ros2 service call /get_arenas_available y_arena_interfaces/srv/GetArenas ros2 run y_arena_odor_controller tester & ros2 topic echo /arena_odors","title":"Linux Host"},{"location":"setup/linux_host/#linux","text":"","title":"Linux"},{"location":"setup/linux_host/#install-docker","text":"https://github.com/janelia-experimental-technology/docker_setup","title":"Install Docker"},{"location":"setup/linux_host/#clone-repository-and-build-docker-image","text":"cd y_arena_odor_controller_ros docker stop $( docker ps -aq ) docker system prune -f docker build -t y_arena_odor_controller:latest .","title":"Clone Repository and Build Docker Image"},{"location":"setup/linux_host/#send-messages-to-ycontroller","text":"docker run --rm --net = host --pid = host -it y_arena_odor_controller:latest ros2 topic pub --once /arena_odors y_arena_interfaces/msg/ArenaOdors \"{arena: 0, odors: [0, 1, 2]}\" ros2 service call /get_arenas_available y_arena_interfaces/srv/GetArenas ros2 run y_arena_odor_controller tester & ros2 topic echo /arena_odors","title":"Send Messages to ycontroller"},{"location":"setup/windows_matlab_host/","text":"Windows 10 Check for new Windows updates and install all. Matlab 2020b Download and install Matlab R2020b with ROS Toolbox. https://www.mathworks.com/downloads/ Install Chocolatey https://chocolatey.org/ Install Dependencies Open an administrative shell. choco -v choco install -y python --version 3 .7.9 --force python --version choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System' cmake --version choco install -y visualstudio2017community choco install -y git Setup Visual Studio Restart computer. Launch the Visual Studio Installer application from the Start Menu. Click Modify Visual Studio. Select 'Desktop development with C++' Install option with default selections. Install Custom ROS Messages In file explorer, right-click any folder and select 'Git Bash Here'. cd /c/ mkdir ros cd ros git clone https://github.com/janelia-ros/y_arena_odor_controller_ros.git mkdir custom_msgs Generate Custom ROS2 Messages in Matlab In Matlab: % check to make sure python 3.7 is used pyenv mex - setup cpp % follow instructions if necessary to use the Microsoft Visual C++ 2017 compiler ros2 node list ros2 msg list folderPath = 'C:\\ros\\custom_msgs' copyfile ( 'C:\\ros\\y_arena_odor_controller_ros\\y_arena_interfaces*' , folderPath ) ros2genmsg ( folderPath , 'BuildConfiguration' , 'fasterruns' ) ros2 msg list","title":"Windows Matlab Host"},{"location":"setup/windows_matlab_host/#windows-10","text":"Check for new Windows updates and install all.","title":"Windows 10"},{"location":"setup/windows_matlab_host/#matlab-2020b","text":"Download and install Matlab R2020b with ROS Toolbox. https://www.mathworks.com/downloads/","title":"Matlab 2020b"},{"location":"setup/windows_matlab_host/#install-chocolatey","text":"https://chocolatey.org/","title":"Install Chocolatey"},{"location":"setup/windows_matlab_host/#install-dependencies","text":"Open an administrative shell. choco -v choco install -y python --version 3 .7.9 --force python --version choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System' cmake --version choco install -y visualstudio2017community choco install -y git","title":"Install Dependencies"},{"location":"setup/windows_matlab_host/#setup-visual-studio","text":"Restart computer. Launch the Visual Studio Installer application from the Start Menu. Click Modify Visual Studio. Select 'Desktop development with C++' Install option with default selections.","title":"Setup Visual Studio"},{"location":"setup/windows_matlab_host/#install-custom-ros-messages","text":"In file explorer, right-click any folder and select 'Git Bash Here'. cd /c/ mkdir ros cd ros git clone https://github.com/janelia-ros/y_arena_odor_controller_ros.git mkdir custom_msgs","title":"Install Custom ROS Messages"},{"location":"setup/windows_matlab_host/#generate-custom-ros2-messages-in-matlab","text":"In Matlab: % check to make sure python 3.7 is used pyenv mex - setup cpp % follow instructions if necessary to use the Microsoft Visual C++ 2017 compiler ros2 node list ros2 msg list folderPath = 'C:\\ros\\custom_msgs' copyfile ( 'C:\\ros\\y_arena_odor_controller_ros\\y_arena_interfaces*' , folderPath ) ros2genmsg ( folderPath , 'BuildConfiguration' , 'fasterruns' ) ros2 msg list","title":"Generate Custom ROS2 Messages in Matlab"},{"location":"setup/windows_python_host/","text":"Windows 10 Check for new Windows updates and install all. https://docs.ros.org/en/dashing/Installation/Windows-Install-Binary.html Install ROS 2 Dashing Desktop Install Chocolatey https://chocolatey.org/ Install ROS 2 and Dependencies Open PowerShell as administrator. choco -v mkdir c: \\o pt \\c hocolatey set PYTHONNOUSERSITE = 1 set ChocolateyInstall = c: \\o pt \\c hocolatey choco source add -n = ros-win -s = \"https://aka.ms/ros/public\" --priority = 1 choco upgrade ros-dashing-desktop -y --execution-timeout = 0 choco install -y git choco install -y visualstudio2019community Setup Visual Studio Restart computer. Launch the Visual Studio Installer application from the Start Menu. Click Modify Visual Studio. Select 'Desktop development with C++' Install option with default selections. Install y_arena_odor_controller_ros Run Visual Studio and view terminal and set to Developer Command Prompt. Environment Setup call C: \\o pt \\r os \\d ashing \\x 64 \\l ocal_setup.bat set | findstr -i ROS Create a Workspace and Clone Y-Arena Repository md \\y arena_ws \\s rc cd \\y arena_ws \\s rc git clone https://github.com/janelia-ros/y_arena_odor_controller_ros.git Build the Workspace with Colcon cd \\y arena_ws colcon build --merge-install Source Y-Arena Workspace Open command prompt as non-adminstrator. call \\y arena_ws \\i nstall \\s etup.bat Test Communications Check topic list Check to make sure \"/arena_odors\" is in the list of available topics. ros2 topic list Check multicast In Terminal 1 on host machine: ros2 multicast receive In Terminal 2 on Raspberry Pi: ros2 multicast send Troubleshooting If communications are not working properly, check network connections and settings. The firewall on the host machine may need to be disabled and multicast may need to be enabled.","title":"Windows Python Host"},{"location":"setup/windows_python_host/#windows-10","text":"Check for new Windows updates and install all. https://docs.ros.org/en/dashing/Installation/Windows-Install-Binary.html","title":"Windows 10"},{"location":"setup/windows_python_host/#install-ros-2-dashing-desktop","text":"","title":"Install ROS 2 Dashing Desktop"},{"location":"setup/windows_python_host/#install-chocolatey","text":"https://chocolatey.org/","title":"Install Chocolatey"},{"location":"setup/windows_python_host/#install-ros-2-and-dependencies","text":"Open PowerShell as administrator. choco -v mkdir c: \\o pt \\c hocolatey set PYTHONNOUSERSITE = 1 set ChocolateyInstall = c: \\o pt \\c hocolatey choco source add -n = ros-win -s = \"https://aka.ms/ros/public\" --priority = 1 choco upgrade ros-dashing-desktop -y --execution-timeout = 0 choco install -y git choco install -y visualstudio2019community","title":"Install ROS 2 and Dependencies"},{"location":"setup/windows_python_host/#setup-visual-studio","text":"Restart computer. Launch the Visual Studio Installer application from the Start Menu. Click Modify Visual Studio. Select 'Desktop development with C++' Install option with default selections.","title":"Setup Visual Studio"},{"location":"setup/windows_python_host/#install-y_arena_odor_controller_ros","text":"Run Visual Studio and view terminal and set to Developer Command Prompt.","title":"Install y_arena_odor_controller_ros"},{"location":"setup/windows_python_host/#environment-setup","text":"call C: \\o pt \\r os \\d ashing \\x 64 \\l ocal_setup.bat set | findstr -i ROS","title":"Environment Setup"},{"location":"setup/windows_python_host/#create-a-workspace-and-clone-y-arena-repository","text":"md \\y arena_ws \\s rc cd \\y arena_ws \\s rc git clone https://github.com/janelia-ros/y_arena_odor_controller_ros.git","title":"Create a Workspace and Clone Y-Arena Repository"},{"location":"setup/windows_python_host/#build-the-workspace-with-colcon","text":"cd \\y arena_ws colcon build --merge-install","title":"Build the Workspace with Colcon"},{"location":"setup/windows_python_host/#source-y-arena-workspace","text":"Open command prompt as non-adminstrator. call \\y arena_ws \\i nstall \\s etup.bat","title":"Source Y-Arena Workspace"},{"location":"setup/windows_python_host/#test-communications","text":"","title":"Test Communications"},{"location":"setup/windows_python_host/#check-topic-list","text":"Check to make sure \"/arena_odors\" is in the list of available topics. ros2 topic list","title":"Check topic list"},{"location":"setup/windows_python_host/#check-multicast","text":"In Terminal 1 on host machine: ros2 multicast receive In Terminal 2 on Raspberry Pi: ros2 multicast send","title":"Check multicast"},{"location":"setup/windows_python_host/#troubleshooting","text":"If communications are not working properly, check network connections and settings. The firewall on the host machine may need to be disabled and multicast may need to be enabled.","title":"Troubleshooting"},{"location":"setup/ycontroller/","text":"ycontroller Setup Raspberry Pi https://github.com/janelia-experimental-technology/raspberrypi_setup username : yuser hostname : ycontroller Connect to ycontroller from host machine using SSH or web console. Clone the y-arena repository git clone https://github.com/janelia-experimental-technology/y-arena.git cd y-arena git submodule init git submodule update --recursive Install dependencies sudo apt install python3-filelock -y Build Software Containers cd ~/y-arena git pull origin master git submodule update --recursive cd software/y_arena_odor_controller_ros docker stop $( docker ps -aq ) docker system prune -f docker build -t y_arena_odor_controller:latest . Run Setup Script cd ~/y-arena/setup/ ./ycontroller_setup install sudo reboot Check systemd service systemctl status arena-attached@00.service systemd-analyze plot > boot_analysis.svg Updating sudo apt update sudo apt full-upgrade cd ~/y-arena/setup/ ./ycontroller_setup uninstall git pull origin master git submodule update --recursive ./ycontroller_setup install sudo reboot","title":"ycontroller"},{"location":"setup/ycontroller/#ycontroller","text":"","title":"ycontroller"},{"location":"setup/ycontroller/#setup-raspberry-pi","text":"https://github.com/janelia-experimental-technology/raspberrypi_setup username : yuser hostname : ycontroller Connect to ycontroller from host machine using SSH or web console.","title":"Setup Raspberry Pi"},{"location":"setup/ycontroller/#clone-the-y-arena-repository","text":"git clone https://github.com/janelia-experimental-technology/y-arena.git cd y-arena git submodule init git submodule update --recursive","title":"Clone the y-arena repository"},{"location":"setup/ycontroller/#install-dependencies","text":"sudo apt install python3-filelock -y","title":"Install dependencies"},{"location":"setup/ycontroller/#build-software-containers","text":"cd ~/y-arena git pull origin master git submodule update --recursive cd software/y_arena_odor_controller_ros docker stop $( docker ps -aq ) docker system prune -f docker build -t y_arena_odor_controller:latest .","title":"Build Software Containers"},{"location":"setup/ycontroller/#run-setup-script","text":"cd ~/y-arena/setup/ ./ycontroller_setup install sudo reboot","title":"Run Setup Script"},{"location":"setup/ycontroller/#check-systemd-service","text":"systemctl status arena-attached@00.service systemd-analyze plot > boot_analysis.svg","title":"Check systemd service"},{"location":"setup/ycontroller/#updating","text":"sudo apt update sudo apt full-upgrade cd ~/y-arena/setup/ ./ycontroller_setup uninstall git pull origin master git submodule update --recursive ./ycontroller_setup install sudo reboot","title":"Updating"},{"location":"software/y_arena_odor_controller_ros/","text":"Repository https://github.com/janelia-ros/y_arena_odor_controller_ros","title":"y_arena_odor_controller_ros"},{"location":"software/y_arena_odor_controller_ros/#repository","text":"https://github.com/janelia-ros/y_arena_odor_controller_ros","title":"Repository"},{"location":"usage/arena_odors_message/","text":"Arena Odors Message uint8 arena uint8[3] odors [0, 0, 0]","title":"Arena Odors Message"},{"location":"usage/arena_odors_message/#arena-odors-message","text":"uint8 arena uint8[3] odors [0, 0, 0]","title":"Arena Odors Message"},{"location":"usage/cli/","text":"Docker Command Line docker build -t y_arena_odor_controller:latest ./software/y_arena_odor_controller_ros/ docker run --rm --net = host --pid = host -it y_arena_odor_controller:latest ros2 service call /get_arenas_available y_arena_interfaces/srv/GetArenas ros2 topic pub --once /arena_odors y_arena_interfaces/msg/ArenaOdors \"{arena: 0, odors: [0, 2, 1]}\" ros2 run y_arena_odor_controller tester & ros2 topic echo /arena_odors","title":"Docker Command Line"},{"location":"usage/cli/#docker-command-line","text":"docker build -t y_arena_odor_controller:latest ./software/y_arena_odor_controller_ros/ docker run --rm --net = host --pid = host -it y_arena_odor_controller:latest ros2 service call /get_arenas_available y_arena_interfaces/srv/GetArenas ros2 topic pub --once /arena_odors y_arena_interfaces/msg/ArenaOdors \"{arena: 0, odors: [0, 2, 1]}\" ros2 run y_arena_odor_controller tester & ros2 topic echo /arena_odors","title":"Docker Command Line"},{"location":"usage/cpp/","text":"C++ Source Y-Arena Workspace Source the workspace to setup the environment variables properly before running the C++ script. Linux source ~/yarena_ws/install/setup.bash Windows call \\y arena_ws \\i nstall \\s etup.bat Example C++ Node #include <chrono> #include <functional> #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"y_arena_interfaces/msg/arena_odors.hpp\" using namespace std :: chrono_literals ; class ArenaOdorsPublisher : public rclcpp :: Node { public : ArenaOdorsPublisher () : Node ( \"arena_odors_publisher\" ), arena_ ( 0 ) { publisher_ = this -> create_publisher < y_arena_interfaces :: msg :: ArenaOdors > ( \"/arena_odors\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & ArenaOdorsPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = y_arena_interfaces :: msg :: ArenaOdors (); message . arena = arena_ ; message . odors = { 0 , 2 , 1 }; publisher_ -> publish ( message ); arena_ = ( arena_ + 1 ) % ARENA_COUNT ; } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < y_arena_interfaces :: msg :: ArenaOdors >:: SharedPtr publisher_ ; size_t arena_ ; static const size_t ARENA_COUNT = 16 ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < ArenaOdorsPublisher > ()); rclcpp :: shutdown (); return 0 ; }","title":"C++"},{"location":"usage/cpp/#c","text":"","title":"C++"},{"location":"usage/cpp/#source-y-arena-workspace","text":"Source the workspace to setup the environment variables properly before running the C++ script.","title":"Source Y-Arena Workspace"},{"location":"usage/cpp/#linux","text":"source ~/yarena_ws/install/setup.bash","title":"Linux"},{"location":"usage/cpp/#windows","text":"call \\y arena_ws \\i nstall \\s etup.bat","title":"Windows"},{"location":"usage/cpp/#example-c-node","text":"#include <chrono> #include <functional> #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"y_arena_interfaces/msg/arena_odors.hpp\" using namespace std :: chrono_literals ; class ArenaOdorsPublisher : public rclcpp :: Node { public : ArenaOdorsPublisher () : Node ( \"arena_odors_publisher\" ), arena_ ( 0 ) { publisher_ = this -> create_publisher < y_arena_interfaces :: msg :: ArenaOdors > ( \"/arena_odors\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & ArenaOdorsPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = y_arena_interfaces :: msg :: ArenaOdors (); message . arena = arena_ ; message . odors = { 0 , 2 , 1 }; publisher_ -> publish ( message ); arena_ = ( arena_ + 1 ) % ARENA_COUNT ; } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < y_arena_interfaces :: msg :: ArenaOdors >:: SharedPtr publisher_ ; size_t arena_ ; static const size_t ARENA_COUNT = 16 ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < ArenaOdorsPublisher > ()); rclcpp :: shutdown (); return 0 ; }","title":"Example C++ Node"},{"location":"usage/matlab/","text":"Matlab yArenaNode = ros2node ( 'y_arena_matlab_node' ) arenaOdorsPub = ros2publisher ( yArenaNode , '/arena_odors' , 'y_arena_interfaces/ArenaOdors' ) arenaOdorsMsg = ros2message ( 'y_arena_interfaces/ArenaOdors' ) arenaOdorsMsg . arena = uint8 ( 0 ) arenaOdorsMsg . odors = uint8 ([ 0 2 1 ]) send ( arenaOdorsPub , arenaOdorsMsg )","title":"Matlab"},{"location":"usage/matlab/#matlab","text":"yArenaNode = ros2node ( 'y_arena_matlab_node' ) arenaOdorsPub = ros2publisher ( yArenaNode , '/arena_odors' , 'y_arena_interfaces/ArenaOdors' ) arenaOdorsMsg = ros2message ( 'y_arena_interfaces/ArenaOdors' ) arenaOdorsMsg . arena = uint8 ( 0 ) arenaOdorsMsg . odors = uint8 ([ 0 2 1 ]) send ( arenaOdorsPub , arenaOdorsMsg )","title":"Matlab"},{"location":"usage/odors_vector/","text":"Odors Vector arena_odors_message.odors = [arm 0 odor, arm 1 odor, arm 2 odor] The three active odors can be represented by a vector, where each element of the vector represents one of the arms, ARM 0, ARM 1, and ARM 2. Each vector element can take one of three values, 0, 1, or 2, representing ODOR 0, ODOR 1, or ODOR 2. odors = [0, 2, 1] ODOR 0 ODOR 1 ODOR 2 ARM 2 INACTIVE ACTIVE INACTIVE ARM 1 INACTIVE INACTIVE ACTIVE ARM 0 ACTIVE INACTIVE INACTIVE odors = [0, 0, 0] ODOR 0 ODOR 1 ODOR 2 ARM 2 ACTIVE INACTIVE INACTIVE ARM 1 ACTIVE INACTIVE INACTIVE ARM 0 ACTIVE INACTIVE INACTIVE","title":"Odors Vector"},{"location":"usage/odors_vector/#odors-vector","text":"arena_odors_message.odors = [arm 0 odor, arm 1 odor, arm 2 odor] The three active odors can be represented by a vector, where each element of the vector represents one of the arms, ARM 0, ARM 1, and ARM 2. Each vector element can take one of three values, 0, 1, or 2, representing ODOR 0, ODOR 1, or ODOR 2.","title":"Odors Vector"},{"location":"usage/odors_vector/#odors-0-2-1","text":"ODOR 0 ODOR 1 ODOR 2 ARM 2 INACTIVE ACTIVE INACTIVE ARM 1 INACTIVE INACTIVE ACTIVE ARM 0 ACTIVE INACTIVE INACTIVE","title":"odors = [0, 2, 1]"},{"location":"usage/odors_vector/#odors-0-0-0","text":"ODOR 0 ODOR 1 ODOR 2 ARM 2 ACTIVE INACTIVE INACTIVE ARM 1 ACTIVE INACTIVE INACTIVE ARM 0 ACTIVE INACTIVE INACTIVE","title":"odors = [0, 0, 0]"},{"location":"usage/python/","text":"Python Source Y-Arena Workspace Source the workspace to setup the environment variables properly before running the Python script. Linux source ~/yarena_ws/install/setup.bash Windows call \\y arena_ws \\i nstall \\s etup.bat Example Python Node import rclpy from rclpy.node import Node from y_arena_interfaces.msg import ArenaOdors class ArenaOdorsPublisher ( Node ): ARENA_COUNT = 16 def __init__ ( self ): super () . __init__ ( 'arena_odors_publisher' ) self . publisher_ = self . create_publisher ( ArenaOdors , '/arena_odors' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . _arena = 0 def timer_callback ( self ): msg = ArenaOdors () msg . arena = self . _arena msg . odors = [ 0 , 2 , 1 ] self . publisher_ . publish ( msg ) self . _arena = ( self . _arena + 1 ) % self . ARENA_COUNT def main ( args = None ): rclpy . init ( args = args ) arena_odors_publisher = ArenaOdorsPublisher () rclpy . spin ( arena_odors_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) arena_odors_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Python"},{"location":"usage/python/#python","text":"","title":"Python"},{"location":"usage/python/#source-y-arena-workspace","text":"Source the workspace to setup the environment variables properly before running the Python script.","title":"Source Y-Arena Workspace"},{"location":"usage/python/#linux","text":"source ~/yarena_ws/install/setup.bash","title":"Linux"},{"location":"usage/python/#windows","text":"call \\y arena_ws \\i nstall \\s etup.bat","title":"Windows"},{"location":"usage/python/#example-python-node","text":"import rclpy from rclpy.node import Node from y_arena_interfaces.msg import ArenaOdors class ArenaOdorsPublisher ( Node ): ARENA_COUNT = 16 def __init__ ( self ): super () . __init__ ( 'arena_odors_publisher' ) self . publisher_ = self . create_publisher ( ArenaOdors , '/arena_odors' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . _arena = 0 def timer_callback ( self ): msg = ArenaOdors () msg . arena = self . _arena msg . odors = [ 0 , 2 , 1 ] self . publisher_ . publish ( msg ) self . _arena = ( self . _arena + 1 ) % self . ARENA_COUNT def main ( args = None ): rclpy . init ( args = args ) arena_odors_publisher = ArenaOdorsPublisher () rclpy . spin ( arena_odors_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) arena_odors_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Example Python Node"},{"location":"usage/ssh/","text":"SSH ssh yuser@ycontroller # local network ssh yuser@ycontroller.local # inside Janelia ssh yuser@ycontroller.hhmi.org","title":"SSH"},{"location":"usage/ssh/#ssh","text":"ssh yuser@ycontroller # local network ssh yuser@ycontroller.local # inside Janelia ssh yuser@ycontroller.hhmi.org","title":"SSH"},{"location":"usage/web_console/","text":"Web Console https://ycontroller:9090 Local Network https://ycontroller.local:9090 Inside Janelia https://ycontroller.hhmi.org:9090","title":"Web Console"},{"location":"usage/web_console/#web-console","text":"https://ycontroller:9090","title":"Web Console"},{"location":"usage/web_console/#local-network","text":"https://ycontroller.local:9090","title":"Local Network"},{"location":"usage/web_console/#inside-janelia","text":"https://ycontroller.hhmi.org:9090","title":"Inside Janelia"}]}